{"version":3,"sources":["hoc/Layout/PodcastLayout/PodcastLayout.js","components/Footer/Footer.js","components/Post/Post.js","assets/therolistespodcast.xml","components/UI/Spinner/Spinner.module.css","components/UI/PaginationList/PaginationList.js","components/PodcastTile/PodcastTile.js","components/FullPost/FullPost.js","store/actions/posts.js","components/UI/Spinner/Spinner.js","containers/Posts/Posts.js"],"names":["PodcastLayout","props","xs","type","Footer","Post","to","location","postName","title","author","date","dangerouslySetInnerHTML","__html","article","module","exports","PaginationList","items","Math","ceil","totalRecords","number","push","Item","key","active","size","PodcastTile","Col","md","lg","src","alt","content","fetchPosts","dispatch","actionTypes","axios","get","xmlData","then","response","posts","news","podcast","gondo","parser","require","Parser","fetchedPosts","fetchedNews","fetchedPodcast","fetchedGondo","parseString","data","err","result","id","console","log","currentDate","Date","publishDate","toDateString","newStr","replace","getTime","i","length","reverse","loaded","catch","error","fetchPostsFailed","spinner","className","classes","Loader","connect","state","loading","onFetchPosts","actions","useEffect","searchPost","pageTitle","Spinner","useLocation","map","FullPost","Row"],"mappings":"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","file":"static/js/7.8f3249cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport Aux from '../../Auxiliary/Auxiliary';\r\n\r\nimport classes from './PodcastLayout.module.css';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport Posts from '../../../containers/Posts/Posts';\r\nimport Footer from '../../../components/Footer/Footer';\r\nimport PaginationList from '../../../components/UI/PaginationList/PaginationList';\r\n\r\nconst PodcastLayout = (props) => (\r\n    <Aux>\r\n        <Container>\r\n            <Row>\r\n                <Col xs={12} >\r\n                    <Posts {...props} type=\"PODCAST\"/>\r\n                    <PaginationList/>\r\n                </Col>\r\n            </Row>\r\n        </Container> \r\n        \r\n        <Footer/>\r\n             \r\n    </Aux>\r\n)\r\n\r\nexport default PodcastLayout;","import React from 'react'\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\r\n\r\nconst Footer = (props) => {\r\n\r\n    return (\r\n        <Aux>\r\n            Footer\r\n        </Aux>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react'\r\nimport { Col } from 'react-bootstrap';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n        \r\n\r\n    return (\r\n        \r\n        <Col xs={12} >\r\n            <Link to={props.location + '/'  + props.postName}>\r\n                <h1>{props.title}</h1>\r\n                <p>{props.author}</p>\r\n                <p>{props.date}</p>            \r\n                <div dangerouslySetInnerHTML={{ __html: props.article }} />\r\n            </Link>\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","module.exports = __webpack_public_path__ + \"static/media/therolistespodcast.136fedad.xml\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__3OAjI\",\"load2\":\"Spinner_load2___Wl_Z\"};","\r\nimport React from 'react';\r\nimport classes from './PaginationList.module.css';\r\nimport { Pagination } from 'react-bootstrap';\r\n\r\n\r\nconst PaginationList = (props) => {\r\n\r\n    let active = 1;\r\n    let items = [];\r\n\r\n    let totalRecords = 0;\r\n    let totalPages = 0;\r\n    let pageLimit = 15;\r\n\r\n    totalPages = Math.ceil(totalRecords/pageLimit);\r\n\r\n    for (let number = 1; number <= 5; number++) {\r\n        items.push(\r\n            <Pagination.Item key={number} active={number === active}>\r\n            {number}\r\n            </Pagination.Item>,\r\n        );\r\n    }\r\n    \r\n\r\n    const paginationBasic = (\r\n\r\n        <div>\r\n\r\n            {/* <Pagination>{items}</Pagination>\r\n            <br />\r\n\r\n            <Pagination size=\"lg\">{items}</Pagination>\r\n            <br /> */}\r\n\r\n            <Pagination size=\"sm\">{items}</Pagination>\r\n        </div>\r\n    );\r\n\r\n    return(paginationBasic);\r\n};\r\n\r\nexport default PaginationList;\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { Col } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\r\n\r\nconst PodcastTile = (props) => {\r\n\r\n    return (\r\n        <Aux>\r\n            <Col xs={12} md={6} lg={4} >\r\n                {/* <Link to={props.location + '/'  + props.postName}> */}\r\n                <Link to={'/2020/15/16/'  + props.postName}>\r\n                    <img src=\"\" alt=\"\"/>\r\n                    <div> \r\n                        {/* Overlay */}\r\n                        <div>\r\n                             {/* Overlay-text */}\r\n                            <p>{props.date}</p>\r\n                            {/* <div dangerouslySetInnerHTML={{ __html: props.content }} /> */}\r\n                            \r\n                            <h1>{props.title}</h1>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </Link>               \r\n            </Col>\r\n        </Aux>\r\n    )\r\n}\r\n\r\nexport default PodcastTile;","import React from 'react'\r\nimport { Col } from 'react-bootstrap';\r\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\r\nimport classes from './FullPost.module.css';\r\n\r\nconst Post = (props) => {\r\n    \r\n    return (\r\n        \r\n        <Col xs={12} >\r\n            <h1>{props.title}</h1>\r\n            <p>{props.author}</p>\r\n            <p>{props.date}</p> \r\n            <div dangerouslySetInnerHTML={{ __html: props.content }}/>                            \r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\nimport xmlData from '../../assets/therolistespodcast.xml';\r\n\r\n\r\nexport const fetchPostsStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_POSTS_START,\r\n    }\r\n};\r\n\r\nexport const fetchPostsSuccess = (posts, news, podcast, gondo) => {\r\n    return {\r\n        type: actionTypes.FETCH_POSTS_SUCCESS,\r\n        posts: posts,\r\n        news: news,\r\n        podcast: podcast,\r\n        gondo: gondo,\r\n        loaded: true\r\n    }\r\n};\r\n\r\nexport const fetchPostsFailed = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_POSTS_FAILED,\r\n        error: error\r\n    }\r\n};\r\n\r\nconst sortPosts = () => {\r\n\r\n}\r\n\r\nexport const fetchPosts = () => {\r\n\r\n    return dispatch => {\r\n        dispatch(fetchPostsStart());\r\n          \r\n        \r\n        axios.get(xmlData, {\r\n            \"Content-Type\": \"application/xml; charset=utf-8\"\r\n            })\r\n        .then((response) => {\r\n                \r\n            let xml2js = require('xml2js');\r\n            let parser = new xml2js.Parser();\r\n            \r\n            const fetchedPosts = [];\r\n            const fetchedNews = [];\r\n            const fetchedPodcast = [];\r\n            const fetchedGondo = [];\r\n\r\n            parser.parseString(\r\n                response.data,\r\n                (err,result) => {\r\n\r\n                    for (let key in result[\"rss\"][\"channel\"][0][\"item\"]) {                           \r\n                        \r\n                        fetchedPosts.push({\r\n                            ...result[\"rss\"][\"channel\"][0][\"item\"][key],\r\n                            id:key\r\n                        });\r\n                        console.log('test') ;           \r\n                        const currentDate = new Date();\r\n                        const publishDate = new Date(fetchedPosts[key][\"pubDate\"][0]);                       \r\n\r\n                        fetchedPosts[key][\"pubDate\"][0] = publishDate.toDateString();;\r\n\r\n                        let str= fetchedPosts[key][\"content:encoded\"][0];\r\n                        let newStr= str.replace(/\\[audio/,'<audio controls');\r\n                        newStr= newStr.replace(/mp3\\\"\\]/,'mp3\"></audio><br>');\r\n                        \r\n                        fetchedPosts[key][\"content:encoded\"][0] = newStr;                        \r\n                        \r\n                        if(fetchedPosts[key][\"category\"] && (\r\n                            fetchedPosts[key][\"wp:status\"][0] === \"publish\" || (\r\n                                fetchedPosts[key][\"wp:status\"][0] === \"future\" && currentDate.getTime() > publishDate.getTime()\r\n                                )\r\n                            )\r\n                        ){\r\n\r\n                            for (let i=0; i < fetchedPosts[key][\"category\"].length; i++) {\r\n                                \r\n                                switch(fetchedPosts[key][\"category\"][i][\"$\"][\"nicename\"]){\r\n\r\n                                    case \"news\": \r\n                                        fetchedNews.push({\r\n                                        ...fetchedPosts[key],\r\n                                        id:key                                                \r\n                                        });\r\n                                        \r\n                                        \r\n                                        break;\r\n\r\n                                    case \"podcast\": \r\n                                        fetchedPodcast.push({\r\n                                        ...fetchedPosts[key],\r\n                                        id:key                                                \r\n                                        });\r\n\r\n                                        break;\r\n\r\n                                    case \"paris-gondo\": \r\n                                        fetchedGondo.push({\r\n                                        ...fetchedPosts[key],\r\n                                        id:key                                                \r\n                                        });\r\n                                        break;\r\n                                }\r\n                            }                                    \r\n                        }                            \r\n                    }\r\n\r\n                    fetchedPosts.reverse();\r\n                    fetchedNews.reverse();\r\n                    fetchedPodcast.reverse();\r\n                    fetchedGondo.reverse();\r\n                    \r\n                    console.log(fetchedPosts);\r\n                    console.log(fetchedNews);\r\n                    console.log(fetchedPodcast);\r\n                    console.log(fetchedGondo);                       \r\n                }\r\n            )\r\n            \r\n            dispatch(fetchPostsSuccess(fetchedPosts, fetchedNews, fetchedPodcast, fetchedGondo));    \r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n            dispatch(fetchPostsFailed(error));\r\n        });        \r\n        \r\n       \r\n    }\r\n}    ","import React from 'react';\r\nimport classes from './Spinner.module.css'\r\n\r\n\r\nconst spinner = () => (\r\n    <div className={classes.Loader}>Loading...</div>\r\n);\r\n\r\n\r\nexport default spinner;","import React, { useEffect } from 'react';\r\nimport Post from '../../components/Post/Post';\r\nimport PodcastTile from '../../components/PodcastTile/PodcastTile';\r\nimport FullPost from '../../components/FullPost/FullPost';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Row } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst Posts = props => {\r\n\r\n    const { onFetchPosts } = props;\r\n\r\n    useEffect(()=> {\r\n        if(!props.loaded){\r\n            onFetchPosts();\r\n        }        \r\n    }, []);   \r\n\r\n    const searchPost = ( posts, pageTitle ) => {\r\n\r\n        console.log(\"Start Test\");\r\n        for (let i = 0; i < posts.length; i++){\r\n            console.log(posts[i][\"wp:post_name\"][0]);\r\n            if(posts[i][\"wp:post_name\"][0]===pageTitle){\r\n                console.log(\"Found in: \", i);\r\n                return i;\r\n            }\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    let posts = <Spinner />;\r\n    let key = 0;\r\n    let location = useLocation();\r\n    console.log(location);\r\n\r\n    if(!props.loading & props.loaded){\r\n        \r\n        switch (props.type){\r\n            case \"NEWS\":\r\n                posts = props.news.map(news => (\r\n                    <Post\r\n                        key= {news.id}\r\n                        author= {news[\"dc:creator\"][0]}\r\n                        title= {news[\"title\"]}\r\n                        article= {news[\"content:encoded\"][0]}\r\n                        date= {news[\"pubDate\"][0]}\r\n                        postName={news[\"wp:post_name\"][0]}\r\n                        location = {location[\"pathname\"]}/>            \r\n                    ));\r\n                break;\r\n            \r\n            case \"PODCAST\":\r\n                posts =props.podcast.map ( podcast => (                               \r\n                    <PodcastTile \r\n                        key= {podcast.id}\r\n                        date= {podcast[\"pubDate\"][0]}\r\n                        title= {podcast[\"title\"]}\r\n                        content= {podcast[\"content:encoded\"][0]}\r\n                        postName={podcast[\"wp:post_name\"][0]}\r\n                        location = {location[\"pathname\"]}/>           \r\n                    ));\r\n                break;\r\n            \r\n            case \"FULLNEWS\":\r\n                key = searchPost(props.news, props.pageTitle);\r\n                const news= props.news;\r\n                posts =                          \r\n                    <FullPost \r\n                        key= {news[key].id}\r\n                        author= {news[key][\"dc:creator\"][0]}\r\n                        title= {news[key][\"title\"]}\r\n                        content= {news[key][\"content:encoded\"][0]}\r\n                        date= {news[key][\"pubDate\"][0]}/>;\r\n                break;\r\n\r\n            case \"FULLPODCAST\":\r\n                key = searchPost(props.podcast, props.pageTitle);\r\n                const podcast= props.podcast;                               \r\n                posts =                          \r\n                <FullPost \r\n                    key= {podcast[key].id}\r\n                    author= {podcast[key][\"dc:creator\"][0]}\r\n                    date= {podcast[key][\"pubDate\"][0]}\r\n                    title= {podcast[key][\"title\"]}\r\n                    content= {podcast[key][\"content:encoded\"][0]}/>;                    ;             \r\n                break;\r\n        }        \r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {posts}\r\n        </Row>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        news: state.posts.news,\r\n        podcast: state.posts.podcast,\r\n        loading: state.posts.loading,\r\n        loaded: state.posts.loaded\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchPosts: () => dispatch (actions.fetchPosts())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Posts);"],"sourceRoot":""}