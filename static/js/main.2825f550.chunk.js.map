{"version":3,"sources":["components/Navigation/SideDrawer/SideDrawer.module.css","hoc/Auxiliary/Auxiliary.js","store/actions/actionTypes.js","components/Logo/Logo.module.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.module.css","components/UI/Backdrop/Backdrop.module.css","components/Logo/Logo.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Search/Search.js","components/Navigation/Toolbar/Toolbar.js","components/UI/Backdrop/Backdrop.js","components/Navigation/SideDrawer/SideDrawer.js","hoc/Layout/Layout.js","App.js","serviceWorker.js","shared/utility.js","store/reducers/posts.js","index.js"],"names":["module","exports","aux","props","children","FETCH_POSTS_START","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILED","logo","className","classes","Logo","style","height","src","alt","navigationItem","NavigationItem","to","link","exact","activeClassName","active","navigationItems","NavigationItems","drawerToggle","DrawerToggle","onClick","clicked","search","toolbar","Container","DrawerToggleClicked","Search","backdrop","show","Backdrop","sideDrawer","attachedClasses","SideDrawer","Close","open","Open","closed","join","Layout","useState","sideDrawerIsVisible","setSideDrawerIsVisible","Toolbar","drawerToggleClicked","Home","React","lazy","Post","News","Podcast","AboutUs","withRouter","routes","path","render","type","fallback","Boolean","window","location","hostname","match","updateObject","oldObject","updatedProperties","initialState","posts","news","podcast","gondo","loading","loaded","fetchPostsStart","state","action","fetchPostsSuccess","fetchPostsFailed","reducer","actionTypes","composeEnhancers","process","REACT_APP_NODE_ENVX","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","postsReducer","store","createStore","applyMiddleware","thunk","app","StrictMode","basename","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2825f550.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__1ipA4\",\"Logo\":\"SideDrawer_Logo__1nuaS\",\"Open\":\"SideDrawer_Open__3ZVMM\",\"Close\":\"SideDrawer_Close__Xcai9\"};","const aux = (props) => props.children;\r\n\r\nexport default aux;","export const FETCH_POSTS_START = 'FETCH_POSTS_START';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const FETCH_POSTS_FAILED = 'FETCH_POSTS_FAILED';\r\n\r\n// export const FETCH_NEWS_START = 'FETCH_NEWS_START';\r\n// export const FETCH_NEWS_SUCCESS = 'FETCH_NEWS_SUCCESS';\r\n// export const FETCH_NEWS_FAILED = 'FETCH_NEWS_FAILED';\r\n\r\n// export const FETCH_PODCAST_START = 'FETCH_PODCAST_START';\r\n// export const FETCH_PODCAST_SUCCESS = 'FETCH_PODCAST_SUCCESS';\r\n// export const FETCH_PODCAST_FAILED = 'FETCH_PODCAST_FAILED';","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__17Xeb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__3FJtU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__1eqv4\"};","import React from 'react';\r\n\r\nimport classes from './Logo.module.css';\r\n\r\nconst logo = (props) => (\r\n    <div className={classes.Logo} style={{height: props.height}}>\r\n        <img src={\"\"} alt=\"Logo\"/>\r\n    </div>\r\n);\r\n\r\nexport default logo;","import React from 'react';\r\nimport classes from './NavigationItem.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst navigationItem= (props) => (\r\n    <li className={classes.NavigationItem}>\r\n        <NavLink \r\n            to={props.link}\r\n            exact\r\n            activeClassName={classes.active}>{props.children}</NavLink>\r\n    </li>\r\n);\r\n\r\nexport default navigationItem;","import React from 'react';\r\nimport classes from './NavigationItems.module.css';\r\nimport NavigationItem from './NavigationItem/NavigationItem';\r\n\r\nconst navigationItems= (props) => (\r\n    <ul className={classes.NavigationItems}>\r\n        <NavigationItem link=\"/news\">News</NavigationItem>\r\n        <NavigationItem link=\"/podcast\">Podcast</NavigationItem> \r\n        <NavigationItem link=\"/paris_gondo\">Paris Gondo</NavigationItem>\r\n        <NavigationItem link=\"/about_us\">About Us</NavigationItem>\r\n    </ul>\r\n);\r\n\r\nexport default navigationItems;\r\n","import React from 'react';\r\n\r\nimport classes from './DrawerToggle.module.css';\r\n\r\nconst drawerToggle = (props) => (\r\n    <div className={classes.DrawerToggle} onClick={props.clicked}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n);\r\n\r\nexport default drawerToggle;","import React from 'react';\r\n\r\nconst search = (props) => (\r\n    <h1></h1>\r\n)\r\n\r\nexport default search;","import React from 'react';\r\nimport classes from './Toolbar.module.css';\r\n\r\nimport Logo from '../../Logo/Logo';\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\r\nimport Search from '../Search/Search';\r\nimport { Container } from 'react-bootstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst toolbar = (props) => (\r\n    <header>\r\n        <Container>\r\n            <DrawerToggle clicked = {props.DrawerToggleClicked}/>\r\n\r\n            <nav >\r\n                <NavLink to=\"/\" exact>\r\n                    <div className={classes.Logo}>\r\n                        <Logo/>\r\n                    </div>\r\n                </NavLink>\r\n\r\n                <NavigationItems/>                \r\n            </nav>\r\n\r\n            <div>\r\n                <Search/>\r\n            </div>\r\n\r\n        </Container>\r\n    </header>\r\n);\r\n\r\nexport default toolbar;","import React from 'react';\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst backdrop =(props) =>(\r\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport classes from './SideDrawer.module.css';\r\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\nimport Logo from '../../Logo/Logo';\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\n\r\nconst sideDrawer = (props) => {\r\n\r\n    let attachedClasses = [classes.SideDrawer, classes.Close];\r\n\r\n    if (props.open) {\r\n        attachedClasses = [classes.SideDrawer, classes.Open];\r\n\r\n    }\r\n    \r\n    return (\r\n        <Aux>\r\n            <Backdrop show={props.open} clicked={props.closed}/>\r\n            <div className={attachedClasses.join(' ')} onClick={props.closed}>\r\n                <div className={classes.Logo}>\r\n                    <Logo />\r\n                </div>\r\n                <nav>\r\n                    <NavigationItems />\r\n                </nav>\r\n            </div>\r\n\r\n\r\n        </Aux>\r\n    )    \r\n}\r\n\r\n\r\nexport default sideDrawer;\r\n\r\n","import React, { useState } from 'react';\r\nimport Aux from '../Auxiliary/Auxiliary';\r\nimport classes from './Layout.module.css';\r\n\r\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\r\nimport SideDrawer from '../../components/Navigation/SideDrawer/SideDrawer';\r\n\r\n\r\nconst Layout = props => {\r\n\r\n    const [sideDrawerIsVisible, setSideDrawerIsVisible] = useState(false);\r\n\r\n    const sideDrawerClosedHandler = () => {\r\n        setSideDrawerIsVisible(false);\r\n    }\r\n\r\n    const sideDrawerToggleHandler = () => {\r\n        setSideDrawerIsVisible(!sideDrawerIsVisible);\r\n    }\r\n\r\n    return (\r\n        <Aux>\r\n            <Toolbar drawerToggleClicked = {sideDrawerToggleHandler}/>\r\n            <SideDrawer open={sideDrawerIsVisible} closed={sideDrawerClosedHandler}/>\r\n\r\n            <main>                \r\n                {props.children}           \r\n            </main>  \r\n        </Aux>\r\n    )\r\n}\r\n\r\n\r\nexport default Layout;\r\n","import React, { Suspense } from 'react';\r\nimport Layout from './hoc/Layout/Layout';\r\n\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nconst Home = React.lazy(()=>{\r\n  return import ('./hoc/Layout/HomeLayout/HomeLayout');\r\n});\r\n\r\nconst Post = React.lazy(()=>{\r\n  return import ('./hoc/Layout/PostLayout/PostLayout');\r\n});\r\n\r\nconst News = React.lazy(()=>{\r\n  return import ('./hoc/Layout/NewsLayout/NewsLayout');\r\n});\r\n\r\nconst Podcast = React.lazy(()=>{\r\n  return import ('./hoc/Layout/PodcastLayout/PodcastLayout');\r\n});\r\n\r\nconst AboutUs = React.lazy(()=>{\r\n  return import ('./hoc/Layout/AboutUsLayout/AboutUsLayout');\r\n});\r\n\r\nfunction App() {\r\n\r\n  let routes = (\r\n    <Switch>\r\n      <Route path=\"/news\" exact render={(props) =>  <News {...props}/>}/>\r\n      <Route path=\"/news/:pageId\" render={(props) =>  <Post {...props} type=\"FULLNEWS\"/>}/>    \r\n      <Route path=\"/podcast\" exact render={(props) =>  <Podcast {...props}/>}/>\r\n      <Route path=\"/:year/:month/:day/:pageId\" render={(props) =>  <Post {...props} type=\"FULLPODCAST\"/>}/>     \r\n      <Route path=\"/paris_gondo\" render={(props) =>  <Post {...props}/>}/>\r\n      <Route path=\"/about_us\" render={(props) =>  <AboutUs {...props}/>}/>\r\n      <Route path=\"/\" render={(props) =>  <Home {...props}/>}/>            \r\n    </Switch>\r\n  );\r\n\r\n  return (\r\n      <Layout>\r\n        <Suspense fallback={<p>Loading...</p>}>\r\n          {routes}          \r\n        </Suspense>        \r\n      </Layout>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n};\r\n","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject } from '../../shared/utility';\r\n\r\n\r\nconst initialState = {\r\n    posts:[],\r\n    news:[],\r\n    podcast:[],\r\n    gondo:[],\r\n    loading: false,\r\n    loaded: false\r\n};\r\n\r\nconst fetchPostsStart = (state, action) => {\r\n    return updateObject(state, {loading: true}) \r\n};\r\n\r\nconst fetchPostsSuccess = (state, action) => {\r\n    return updateObject(state,{\r\n        posts: action.posts,\r\n        news: action.news,\r\n        podcast: action.podcast,\r\n        gondo: action.gondo,\r\n        loading: false,\r\n        loaded: true\r\n    });\r\n};\r\n\r\nconst fetchPostsFailed = (state, action) => {\r\n    return updateObject(state, {loading: false})  \r\n};\r\n\r\nconst reducer = (state =initialState, action) => {\r\n    \r\n    switch (action.type){           \r\n\r\n        case actionTypes.FETCH_POSTS_START:\r\n            return fetchPostsStart(state, action); \r\n\r\n        case actionTypes.FETCH_POSTS_SUCCESS:      \r\n            return fetchPostsSuccess(state, action); \r\n\r\n        case actionTypes.FETCH_POSTS_FAILED:\r\n            return fetchPostsFailed(state, action); \r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport postsReducer from './store/reducers/posts'\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst composeEnhancers = process.env.REACT_APP_NODE_ENVX === \"development\" ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n  posts: postsReducer\r\n})\r\n\r\nconst store =  createStore(rootReducer, composeEnhancers(\r\n  applyMiddleware(thunk)\r\n));\r\n\r\nconst app = (\r\n  <React.StrictMode>\r\n    <Provider store={store}> \r\n      <BrowserRouter basename=\"/the-rolistes-pod\">\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>\r\n\r\n)\r\n\r\nReactDOM.render(\r\n  app,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}